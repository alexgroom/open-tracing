# configure your datasource

quarkus.datasource.db-kind=postgresql
# add ':otel' to your database URL
quarkus.datasource.jdbc.url=jdbc:otel:postgresql://postgres-database:5432/person
# use the 'OpenTelemetryDriver' instead of the one for your database
quarkus.datasource.jdbc.driver=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver
quarkus.datasource.username=sa
quarkus.datasource.password=sa

%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.jdbc.url=jdbc:h2:mem:person
%dev.quarkus.datasource.jdbc.driver=org.h2.Driver
%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:person
%test.quarkus.datasource.jdbc.driver=org.h2.Driver

# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation=drop-and-create

# OpenShift extension
%prod.quarkus.kubernetes-client.trust-certs=true
%prod.quarkus.kubernetes.deploy=true
%prod.quarkus.kubernetes.deployment-target=openshift
#%prod.quarkus.openshift.build-strategy=docker
%prod.quarkus.openshift.route.expose=true

#%prod.quarkus.jaeger.service-name=people
#%prod.quarkus.jaeger.sampler-type=const
#%prod.quarkus.jaeger.sampler-param=1
#%prod.quarkus.jaeger.endpoint=http://jaeger-collector:14268/api/traces

org.acme.people.service.StarWarsService/mp-rest/url=https://swapi.dev

quarkus.opentelemetry.enabled=true
quarkus.opentelemetry.tracer.exporter.otlp.endpoint=http://otel-collector-collector:4317

quarkus.opentelemetry.tracer.exporter.otlp.headers=Authorization=Bearer my_secret

quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, parentId=%X{parentId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n

# Alternative to the console log
quarkus.http.access-log.pattern="...traceId=%{X,traceId} spanId=%{X,spanId}"

